// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Event {
  id          String   @id @default(uuid())
  name        String
  description String
  date        DateTime
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Spot        Spot[]
}

model Spot {
  id                 String               @id @default(uuid())
  name               String
  status             SpotStatus
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  eventId            String
  Event              Event                @relation(fields: [eventId], references: [id])
  ReservationHistory ReservationHistory[]
  Ticket             Ticket?
}

model ReservationHistory {
  id         String       @id @default(uuid())
  email      String
  ticketKind TicketKind
  status     TicketStatus
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now())
  spotId     String
  Spot       Spot         @relation(fields: [spotId], references: [id])
}

enum SpotStatus {
  available
  reserved
}

model Ticket {
  id         String     @id @default(uuid())
  email      String
  ticketKind TicketKind
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now())
  spotId     String
  Spot       Spot       @relation(fields: [spotId], references: [id])

  @@unique([spotId])
}

enum TicketKind {
  full
  half
}

enum TicketStatus {
  reserved
  canceled
}

model Product {
  id                String              @id @default(uuid())
  code              String?
  description       String?
  price             Float?
  situation         String?
  parentCode        String?
  externalImageURLs ExternalImageURLs[]
  productCategories ProductCategory[]
  orderItems        OrderItem[]
}

model Category {
  id                String            @id @default(uuid())
  name              String
  productCategories ProductCategory[]
}

model ProductCategory {
  categoryId String
  productId  String
  Category   Category @relation(fields: [categoryId], references: [id])
  Product    Product  @relation(fields: [productId], references: [id])

  @@id([productId, categoryId])
}

model ExternalImageURLs {
  id        String  @id @default(uuid())
  url       String
  productId String
  Product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id     String      @id @default(uuid())
  total  Float
  status OrderStatus
  items  OrderItem[]
}

model OrderItem {
  id        String  @id @default(uuid())
  quantity  Int
  price     Float
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model User {
  id       String    @id @default(uuid())
  name     String
  email    String
  password String
  role     UserRole
  Address  Address[]
}

enum UserRole {
  ADMIN
  USER
  PARTNER
}

model Address {
  id        String   @id @default(uuid())
  address1  String
  address2  String
  city      String
  state     String
  zipCode   String
  country   String
  userId    String
  User      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}
